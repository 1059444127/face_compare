%# Face_Compare

%基于身份证的人脸对比，使用eyekey的api。对应的[CSDN博客在这里](http://blog.csdn.net/baolinq/article/details/77140574)

%input：两张人脸照片，可以是直接拍照的，也可以是身份证或者学生证图片等

%functions：
% * face detect 人脸检测
% * face features detect 人脸特征点检测，43个点
% * face compare 人脸对比

%output：
%* 人脸检测 输出性别、年龄、人脸中心点坐标、人脸尺寸等信息
%* 人脸特征点检测 标记和定位出人脸的43个特征点
%* 输出两张人脸的相似度，百分数显示，越大相似度越高

%作者信息 hu_nobuone@163.com 

%软件版本：v1.0  Copyright(C)  2017  KB535

%时间 2017.8.9

function varargout = face_compare_v1_export(varargin)
% FACE_COMPARE_V1_EXPORT MATLAB code for face_compare_v1_export.fig
%      FACE_COMPARE_V1_EXPORT, by itself, creates a new FACE_COMPARE_V1_EXPORT or raises the existing
%      singleton*.
%
%      H = FACE_COMPARE_V1_EXPORT returns the handle to a new FACE_COMPARE_V1_EXPORT or the handle to
%      the existing singleton*.
%
%      FACE_COMPARE_V1_EXPORT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in FACE_COMPARE_V1_EXPORT.M with the given input arguments.
%
%      FACE_COMPARE_V1_EXPORT('Property','Value',...) creates a new FACE_COMPARE_V1_EXPORT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before face_compare_v1_export_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to face_compare_v1_export_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help face_compare_v1_export

% Last Modified by GUIDE v2.5 07-Aug-2017 10:55:29

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @face_compare_v1_export_OpeningFcn, ...
                   'gui_OutputFcn',  @face_compare_v1_export_OutputFcn, ...
                   'gui_LayoutFcn',  @face_compare_v1_export_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

% End initialization code - DO NOT EDIT


% --- Executes just before face_compare_v1_export is made visible.
function face_compare_v1_export_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to face_compare_v1_export (see VARARGIN)

% Choose default command line output for face_compare_v1_export
handles.output = hObject;
%%%%%%%%%%%%%%%%%%
h = handles.figure1; %返回其句柄
newIcon = javax.swing.ImageIcon('./image/icon/camera.png');
figFrame = get(h,'JavaFrame'); %取得Figure的JavaFrame。
figFrame.setFigureIcon(newIcon); %修改图标

API_KEY = 'your key';   %用你自己的key和secret
API_SECRET = 'your secret';

% If you have chosen Amazon as your API sever and 
% changed API_KEY&API_SECRET into yours, 
% pls reform the FACEPP call as following :
% api = facepp(API_KEY, API_SECRET, 'US')
global api;
api= facepp(API_KEY, API_SECRET);

global img img0 pre pre0;
str='.\image\lena.jpg';
pre=str;
pre0=str;
 img=imread(str);
axes(handles.axes1);
imshow(img);
str0=str;
img0=imread(str0);
axes(handles.axes2);
imshow(img0);
set(handles.select1,'userdata',str);
set(handles.select2,'userdata',str0);
% Update handles structure
guidata(hObject, handles);
set(handles.text1,'String',str);
set(handles.text2,'String',str0);
set(handles.text4,'fontsize',12,'String','初始化。注意事项：要先做人脸检测，才能做特征检测和人脸对比。也可以一键处理。');
% UIWAIT makes face_compare_v1_export wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = face_compare_v1_export_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in select1.
function select1_Callback(hObject, eventdata, handles)
% hObject    handle to select1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global pre img;
default_path='./image';
[filename,pathname]=uigetfile({'*.jpg;*.png;*bmp;*.pgm','All Picture Files (*.jpg, *.png, *.bmp, *.pgm)';'*.*',  'All Files (*.*)'},'选择图片',default_path);
%合成图片路径+文件名
str=[pathname filename];
if (sum(size(str))>4)
    axes(handles.axes1) ;
    cla reset;
    pre=str;
    set(handles.text4,'string','成功读取图片1');
else 
    set(handles.text4,'string','没有选择图片，将用上次的图片');
end;
set(handles.select1,'userdata',pre);
set(handles.text1,'String',pre);
%读取图片
img=imread(pre);%使用第一个axes
% img=imresize(img,[640,480]);
%image_1=double(img);
axes(handles.axes1);
imshow(img);



% --- Executes on button press in select2.
function select2_Callback(hObject, eventdata, handles)
% hObject    handle to select2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global pre0 img0
default_path='./image';
[filename,pathname]=uigetfile({'*.jpg;*.png;*bmp;*.pgm','All Picture Files (*.jpg, *.png, *.bmp, *.pgm)';'*.*',  'All Files (*.*)'},'选择图片',default_path);
%合成图片路径+文件名
str0=[pathname filename];
if (sum(size(str0))>4)
    axes(handles.axes2) ;
    cla reset;
    pre0=str0;
    set(handles.text4,'string','成功读取图片2');
else 
    set(handles.text4,'string','没有选择图片，将用上次的图片');
end
set(handles.select2,'userdata',pre0);
set(handles.text2,'String',pre0);
%读取图片
 img0=imread(pre0);
%image_0=double(img0);
%使用第二个axes
axes(handles.axes2);
imshow(img0);


% --- Executes on button press in detect.
function detect_Callback(hObject, eventdata, handles)
% hObject    handle to detect (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(handles.text4,'string','');
tic;
global api  img0 img;
str=get(handles.select1,'userdata');
str0=get(handles.select2,'userdata');
global rst rst0
rst = detect_file(api, str, 'all');
rst0=detect_file(api,str0,'all');
img_width = rst{1}.img_width;
img_height = rst{1}.img_height;
img_width0 = rst0{1}.img_width;
img_height0 = rst0{1}.img_height;
face = rst{1}.face;
face0=rst0{1}.face;
%set(handles.detect,'userdata',{face,face0});
% set(handles.detect,'userdata',face0);
fprintf('Totally %d faces detected!\n', length(face));
fprintf('Totally %d faces detected!\n', length(face0));
axes(handles.axes1) ;
cla reset;
axes(handles.axes1);
 imshow(img);
 hold on;
for i = 1 : length(face)
    % Draw face rectangle on the image
    face_i = face{i};
    center = face_i.position.center;
    w = face_i.position.width / 100 * img_width;
    h = face_i.position.height / 100 * img_height;
    rectangle('Position', ...
        [center.x * img_width / 100 -  w/2, center.y * img_height / 100 - h/2, w, h+10], ...
        'Curvature', 0.4, 'LineWidth',2, 'EdgeColor', 'blue');
    age1=face_i.attribute.age.value;
    gender1=face_i.attribute.gender.value;
    race1=face_i.attribute.race.value;
end
axes(handles.axes2) ;
cla reset;
axes(handles.axes2);
 imshow(img0);
 hold on;
for i = 1 : length(face0)
    % Draw face rectangle on the image
    face_i = face0{i};
    center = face_i.position.center;
    w = face_i.position.width / 100 * img_width0;
    h = face_i.position.height / 100 * img_height0;
    rectangle('Position', ...
        [center.x * img_width0 / 100 -  w/2, center.y * img_height0 / 100 - h/2, w, h+10], ...
        'Curvature', 0.4, 'LineWidth',2, 'EdgeColor', 'blue');
    age2=face_i.attribute.age.value;
    gender2=face_i.attribute.gender.value;
    race2=face_i.attribute.race.value;
end
t=toc;
if strcmp(gender1,'Male')
    gender1='男';
else
    gender1='女';
end
if strcmp(gender2,'Male')
    gender2='男';
else
    gender2='女';
end
if strcmp(race1,'Asian')
    race1='亚洲（黄种人）';
else if strcmp(race1,'White')
    race1='欧美（白种人）';
else
    race1='非洲（黑种人）';
    end
end
if strcmp(race2,'Asian')
    race2='亚洲（黄种人）';
else if strcmp(race2,'White')
    race2='欧美（白种人）';
else
    race2='非洲（黑种人）';
    end
end
str1=sprintf('人脸检测\n用时 %.4f秒\none{ 年龄 %d岁    性别 %s    种族 %s }\ntwo{ 年龄 %d岁    性别 %s    种族 %s }\n',t,age1,gender1,race1,age2,gender2,race2);
set(handles.text4,'fontsize',10,'string',str1);
                
% --- Executes on button press in landmark.
function landmark_Callback(hObject, eventdata, handles)
% hObject    handle to landmark (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(handles.text4,'string','');
tic;
global api img0 img rst rst0;
% fa=get(handles.detect,'userdata');
% face=fa{1};
% face0=fa{2};
% str=get(handles.select1,'userdata');
% str0=get(handles.select2,'userdata');
% rst = detect_file(api, str, 'all');
% rst0=detect_file(api,str0,'all');

img_width = rst{1}.img_width;
img_height = rst{1}.img_height;
img_width0 = rst0{1}.img_width;
img_height0 = rst0{1}.img_height;
face = rst{1}.face;
face0=rst0{1}.face;
% [img_width,img_height]=size(img);
% [img_width0,img_height0]=size(img0);
axes(handles.axes1) ;
cla reset;
axes(handles.axes1);
 imshow(img);
 hold on;
for i = 1 : length(face)
    % Draw face rectangle on the image
    face_i = face{i};    
    center = face_i.position.center;
    w = face_i.position.width / 100 * img_width;
    h = face_i.position.height / 100 * img_height;
    rectangle('Position', ...
        [center.x * img_width / 100 -  w/2, center.y * img_height / 100 - h/2, w, h+10], ...
        'Curvature', 0.4, 'LineWidth',2, 'EdgeColor', 'blue');
    % Detect facial key points
    rst2 = api.landmark(face_i.face_id, '83p');
    landmark_points = rst2{1}.result{1}.landmark;
    landmark_names = fieldnames(landmark_points);
    
    % Draw facial key points
    for j = 1 : length(landmark_names)
        pt = getfield(landmark_points, landmark_names{j});
        scatter(pt.x * img_width / 100, pt.y * img_height / 100, 'g.');
    end
end
axes(handles.axes2) ;
cla reset;
axes(handles.axes2);
 imshow(img0);
 hold on;
for i = 1 : length(face0)
    % Draw face rectangle on the image
    face_i = face0{i};
        center = face_i.position.center;
    w = face_i.position.width / 100 * img_width0;
    h = face_i.position.height / 100 * img_height0;
    rectangle('Position', ...
        [center.x * img_width0 / 100 -  w/2, center.y * img_height0 / 100 - h/2, w, h+10], ...
        'Curvature', 0.4, 'LineWidth',2, 'EdgeColor', 'blue');
    
    % Detect facial key points
    rst3 = api.landmark(face_i.face_id, '83p');
    landmark_points = rst3{1}.result{1}.landmark;
    landmark_names = fieldnames(landmark_points);
    
    % Draw facial key points
    for j = 1 : length(landmark_names)
        pt = getfield(landmark_points, landmark_names{j});
        scatter(pt.x * img_width0 / 100, pt.y * img_height0 / 100, 'g.');
    end
end
t=toc;
str1=sprintf('人脸特征点检测\n用时 %.4f秒\n特征点个数 83个\n',t);
set(handles.text4,'fontsize',10,'string',str1);

% --- Executes on button press in compare.
function compare_Callback(hObject, eventdata, handles)
% hObject    handle to compare (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(handles.text4,'string','');
tic;
global api  rst rst0;
% fa=get(handles.detect,'userdata');
% face=fa{1};
% face0=fa{2};
% str=get(handles.select1,'userdata');
% str0=get(handles.select2,'userdata');
% rst = detect_file(api, str, 'all');
% rst0=detect_file(api,str0,'all');
% img_width = rst{1}.img_width;
% img_height = rst{1}.img_height;
% img_width0 = rst0{1}.img_width;
% img_height0 = rst0{1}.img_height;
face = rst{1}.face;
face0=rst0{1}.face;

face_i=face{1};
face_j=face0{1};
cmp_rst=api.face_compare(face_i.face_id,face_j.face_id);
cmp_i=cmp_rst{1};
similarity=cmp_i.similarity;
cmp_con=cmp_i.component_similarity;
rst_eye=cmp_con.eye;
rst_eyebrow=cmp_con.eyebrow;
rst_mouth=cmp_con.mouth;
rst_nose=cmp_con.nose;
fprintf('eye similarity is %.4f\n', rst_eye);
fprintf('eyebrow similarity is %.4f\n', rst_eyebrow);
fprintf('mouse similarity is %.4f\n', rst_mouth);
fprintf('nose similarity is %.4f\n', rst_nose);
fprintf('face similarity is %.4f\n', similarity);
t=toc;
str1=sprintf('人脸对比\n用时 %.4f秒\n眼睛相似度 %.4f\n眉毛相似度 %.4f\n嘴巴相似度 %.4f\n鼻子相似度 %.4f\n总体相似度 %.4f\n',t,rst_eye,rst_eyebrow,rst_mouth,rst_nose,similarity);
set(handles.text4,'fontsize',9,'string',str1);
% str1=['人脸对比用时',num2str(t),'秒',10,'eye similarity is ', num2str(rst_eye),10,...
%     'eyebrow similarity is ',num2str(rst_eyebrow),10,'mouse similarity is ', ...
%     num2str(rst_mouth),10,'nose similarity is ', num2str(rst_nose),10,...
%     'face similarity is ', num2str(similarity)];
% str1=['人脸对比用时',num2str(t),'秒',10,'眼睛相似度  ', num2str(rst_eye),10,...
%     '眉毛相似度  ',num2str(rst_eyebrow),10,'嘴巴相似度  ', ...
%     num2str(rst_mouth),10,'鼻子相似度  ', num2str(rst_nose),10,...
%     '总体相似度 ', num2str(similarity)];
% set(handles.text4,'string',str1);

% --- Executes on button press in onebutton.
function onebutton_Callback(hObject, eventdata, handles)
% hObject    handle to onebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(handles.text4,'string','');
tic;
global api img img0;
str=get(handles.select1,'userdata');
str0=get(handles.select2,'userdata');
rst = detect_file(api, str, 'all');
rst0=detect_file(api,str0,'all');
img_width = rst{1}.img_width;
img_height = rst{1}.img_height;
img_width0 = rst0{1}.img_width;
img_height0 = rst0{1}.img_height;
face = rst{1}.face;
face0=rst0{1}.face;
% [img_width,img_height]=size(img);
% [img_width0,img_height0]=size(img0);
axes(handles.axes1) ;
cla reset;
axes(handles.axes1);
imshow(img);
hold on;
for i = 1 : length(face)
    % Draw face rectangle on the image
    face_i = face{i};    
    center = face_i.position.center;
    w = face_i.position.width / 100 * img_width;
    h = face_i.position.height / 100 * img_height;
    rectangle('Position', ...
        [center.x * img_width / 100 -  w/2, center.y * img_height / 100 - h/2, w, h+10], ...
        'Curvature', 0.4, 'LineWidth',2, 'EdgeColor', 'blue');
    % Detect facial key points
    rst2 = api.landmark(face_i.face_id, '83p');
    landmark_points = rst2{1}.result{1}.landmark;
    landmark_names = fieldnames(landmark_points);
    
    % Draw facial key points
    for j = 1 : length(landmark_names)
        pt = getfield(landmark_points, landmark_names{j});
        scatter(pt.x * img_width / 100, pt.y * img_height / 100, 'g.');
    end
end
axes(handles.axes2) ;
cla reset;
axes(handles.axes2);
imshow(img0);
hold on;
for i = 1 : length(face0)
    % Draw face rectangle on the image
    face_i = face0{i};
        center = face_i.position.center;
    w = face_i.position.width / 100 * img_width0;
    h = face_i.position.height / 100 * img_height0;
    rectangle('Position', ...
        [center.x * img_width0 / 100 -  w/2, center.y * img_height0 / 100 - h/2, w, h+10], ...
        'Curvature', 0.4, 'LineWidth',2, 'EdgeColor', 'blue');
    
    % Detect facial key points
    rst3 = api.landmark(face_i.face_id, '83p');
    landmark_points = rst3{1}.result{1}.landmark;
    landmark_names = fieldnames(landmark_points);
    
    % Draw facial key points
    for j = 1 : length(landmark_names)
        pt = getfield(landmark_points, landmark_names{j});
        scatter(pt.x * img_width0 / 100, pt.y * img_height0 / 100, 'g.');
    end
end
face_i=face{1};
face_j=face0{1};
cmp_rst=api.face_compare(face_i.face_id,face_j.face_id);
cmp_i=cmp_rst{1};
similarity=cmp_i.similarity;
cmp_con=cmp_i.component_similarity;
rst_eye=cmp_con.eye;
rst_eyebrow=cmp_con.eyebrow;
rst_mouth=cmp_con.mouth;
rst_nose=cmp_con.nose;
t=toc;
str1=sprintf('人脸对比\n用时 %.4f秒\n眼睛相似度 %.4f\n眉毛相似度 %.4f\n嘴巴相似度 %.4f\n鼻子相似度 %.4f\n总体相似度 %.4f\n',t,rst_eye,rst_eyebrow,rst_mouth,rst_nose,similarity);
set(handles.text4,'fontsize',9,'string',str1);
% str1=['人脸对比用时',num2str(t),'秒',10,'眼睛相似度  ', num2str(rst_eye),10,...
%     '眉毛相似度  ',num2str(rst_eyebrow),10,'嘴巴相似度  ', ...
%     num2str(rst_mouth),10,'鼻子相似度  ', num2str(rst_nose),10,...
%     '总体相似度 ', num2str(similarity)];
% set(handles.text4,'string',str1);

 save_txt = fopen('output.txt','wt');
 fprintf(save_txt,'人脸对比用时 %.4f秒\n', t);
 fprintf(save_txt,'eye similarity is %.4f\n', rst_eye);
fprintf(save_txt,'eyebrow similarity is %.4f\n', rst_eyebrow);
fprintf(save_txt,'mouth similarity is %.4f\n', rst_mouth);
fprintf(save_txt,'nose similarity is %.4f\n', rst_nose);
fprintf(save_txt,'face similarity is %.4f\n', similarity);
fclose(save_txt);


% --- Executes on button press in close.
function close_Callback(hObject, eventdata, handles)
% hObject    handle to close (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
button=questdlg('是否确认关闭','关闭确认','是','否','是');
if strcmp(button,'是')
    close(gcf);
    delete(hObject);
else
    return;
end


% --- Executes on button press in start.
function start_Callback(hObject, eventdata, handles)
% hObject    handle to start (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
clc;
clear img img0 pre pre0;
global img img0 pre pre0;
axes(handles.axes1) ;
cla reset;
axes(handles.axes2) ;
cla reset;
str='.\image\lena.jpg';
pre=str;
pre0=str;
img=imread(str);
axes(handles.axes1);
imshow(img);
str0=str;
img0=imread(str0);
axes(handles.axes2);
imshow(img0);
set(handles.select1,'userdata',str);
set(handles.select2,'userdata',str0);
set(handles.text1,'String',str);
set(handles.text2,'String',str0);
set(handles.text4,'String','初始化。注意事项：要先做人脸检测，才能做特征检测和人脸对比。也可以一键处理。');


% --- Creates and returns a handle to the GUI figure. 
function h1 = face_compare_v1_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', -1, ...
    'taginfo', struct(...
    'figure', 2, ...
    'text', 8, ...
    'axes', 3, ...
    'pushbutton', 9, ...
    'slider', 2, ...
    'uipanel', 2, ...
    'uibuttongroup', 2), ...
    'override', 0, ...
    'release', [], ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', 'F:\opencv\summer__holiday\人脸识别\facepp-matlab-sdk-master\face_compare_v1_export.m', ...
    'lastFilename', 'F:\opencv\summer__holiday\人脸识别\facepp-matlab-sdk-master\face_compare_v1.fig');
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'PaperUnits','inches',...
'Units','characters',...
'Position',[135.8 26.3571428571429 208.6 49.4285714285714],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'CurrentAxesMode','manual',...
'IntegerHandle','off',...
'MenuBar','none',...
'Name','face_compare_v1',...
'NumberTitle','off',...
'Resize','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'PaperSize',[8.5 11],...
'PaperSizeMode',get(0,'defaultfigurePaperSizeMode'),...
'PaperType','usletter',...
'PaperTypeMode',get(0,'defaultfigurePaperTypeMode'),...
'PaperUnitsMode',get(0,'defaultfigurePaperUnitsMode'),...
'ScreenPixelsPerInchMode','manual',...
'ParentMode','manual',...
'HandleVisibility','callback',...
'Tag','figure1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axes1';

h2 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units','characters',...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'Position',[9.6 17.0714285714286 90.2 25.0714285714286],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[27.118 5.43714285714286 19.817 3.70714285714286],...
'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
'PlotBoxAspectRatio',[1 0.778270509977827 0.778270509977827],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'XColor',[1 1 1],...
'XTick',[],...
'YColor',[1 1 1],...
'YTick',[],...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'XAxisMode',get(0,'defaultaxesXAxisMode'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YAxisMode',get(0,'defaultaxesYAxisMode'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZAxisMode',get(0,'defaultaxesZAxisMode'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'Tag','axes1',...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.500000580451441 1.00783475783476 0.499999999999998],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[1 1 1],...
'ColorMode','auto',...
'Position',[0.500000476837158 -0.0151946818613486 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[1 1 1],...
'ColorMode','auto',...
'Position',[-0.0118255728011826 0.500000476837158 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',10,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

appdata = [];
appdata.lastValidTag = 'axes2';

h7 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units','characters',...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'Position',[109.6 17.1428571428571 90.2 25.0714285714286],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[27.118 5.43714285714286 19.817 3.70714285714286],...
'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
'PlotBoxAspectRatio',[1 0.778270509977827 0.778270509977827],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'XColor',[1 1 1],...
'XTick',[],...
'YColor',[1 1 1],...
'YTick',[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1],...
'YTickMode',get(0,'defaultaxesYTickMode'),...
'YTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'XAxisMode',get(0,'defaultaxesXAxisMode'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YAxisMode',get(0,'defaultaxesYAxisMode'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZAxisMode',get(0,'defaultaxesZAxisMode'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'Tag','axes2',...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h8 = get(h7,'title');

set(h8,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.50000163774004 1.00783475783476 0.499999999999998],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h9 = get(h7,'xlabel');

set(h9,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[1 1 1],...
'ColorMode','auto',...
'Position',[0.500000476837159 -0.0151946818613486 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h10 = get(h7,'ylabel');

set(h10,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[1 1 1],...
'ColorMode','auto',...
'Position',[-0.0628233542507519 0.500000476837158 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h11 = get(h7,'zlabel');

set(h11,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',10,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

appdata = [];
appdata.lastValidTag = 'select1';

h12 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','选择图片1',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[9.8 12.4285714285714 17.8 2.64285714285714],...
'Callback',@(hObject,eventdata)face_compare_v1_export('select1_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','select1',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text1';

h13 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','图片1的路径',...
'Style','text',...
'Position',[27.4 12.5 68 2.57142857142857],...
'Children',[],...
'ParentMode','manual',...
'Tag','text1',...
'FontSize',10,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'select2';

h14 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','选择图片2',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[109.8 12 18.6 2.64285714285714],...
'Callback',@(hObject,eventdata)face_compare_v1_export('select2_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','select2',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text2';

h15 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','图片2的路径',...
'Style','text',...
'Position',[128.2 12.0714285714286 65.8 2.57142857142857],...
'Children',[],...
'ParentMode','manual',...
'Tag','text2',...
'FontSize',9,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text3';

h16 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Face Compare v1.0',...
'Style','text',...
'Position',[75.4 44.5714285714286 64.6 2.78571428571428],...
'Children',[],...
'ParentMode','manual',...
'Tag','text3',...
'FontSize',20,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'detect';

h17 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','人脸检测',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[20 7.57142857142857 20.2 2.5],...
'BackgroundColor',get(0,'defaultuicontrolBackgroundColor'),...
'Callback',@(hObject,eventdata)face_compare_v1_export('detect_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','detect',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'landmark';

h18 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','特征点检测',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[50 7.57142857142857 20.2 2.5],...
'Callback',@(hObject,eventdata)face_compare_v1_export('landmark_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','landmark',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'compare';

h19 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','人脸对比',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[19.8 3.92857142857143 20.2 2.57142857142857],...
'Callback',@(hObject,eventdata)face_compare_v1_export('compare_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'ParentMode','manual',...
'Tag','compare',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'onebutton';

h20 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','一键处理',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[49.8 4 20.2 2.5],...
'Callback',@(hObject,eventdata)face_compare_v1_export('onebutton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','onebutton',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text4';

h21 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'HorizontalAlignment','left',...
'Max',2,...
'String','输出检测结果',...
'Style','text',...
'Position',[100 0.357142857142857 80.2 9.71428571428571],...
'Children',[],...
'ParentMode','manual',...
'Tag','text4',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'close';

h22 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','退出',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[50 0.642857142857143 20.2 2.28571428571429],...
'Callback',@(hObject,eventdata)face_compare_v1_export('close_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','close',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'start';

h23 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','初始化',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[20 0.571428571428571 20.2 2.35714285714286],...
'BackgroundColor',[0.941176470588235 0.941176470588235 0.941176470588235],...
'Callback',@(hObject,eventdata)face_compare_v1_export('start_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'ParentMode','manual',...
'Tag','start',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % FACE_COMPARE_V1_EXPORT
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % FACE_COMPARE_V1_EXPORT(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % FACE_COMPARE_V1_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % FACE_COMPARE_V1_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


